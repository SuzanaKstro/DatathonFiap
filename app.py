import streamlit as st
import joblib
import pandas as pd

# Define os campos e nomes amig√°veis
campos = {
    'perfil_vaga.estado': 'Estado da vaga',
    'perfil_vaga.cidade': 'Cidade da vaga',
    'perfil_vaga.regiao': 'Regi√£o da vaga',
    'perfil_vaga.nivel_academico': 'N√≠vel acad√™mico da vaga',
    'perfil_vaga.nivel_ingles': 'N√≠vel de ingl√™s da vaga',
    'perfil_vaga.nivel_espanhol': 'N√≠vel de espanhol da vaga',
    'perfil_vaga.areas_atuacao': '√Årea de atua√ß√£o da vaga',
    'perfil_vaga.vaga_especifica_para_pcd': 'Vaga espec√≠fica para PCD?',
    'informacoes_basicas.prioridade_vaga': 'Prioridade da vaga',
    'informacoes_profissionais.area_atuacao': '√Årea de atua√ß√£o do candidato',
    'informacoes_profissionais.nivel_profissional': 'N√≠vel profissional do candidato',
    'formacao_e_idiomas.nivel_academico': 'N√≠vel acad√™mico do candidato',
    'formacao_e_idiomas.nivel_ingles': 'N√≠vel de ingl√™s do candidato',
    'formacao_e_idiomas.nivel_espanhol': 'N√≠vel de espanhol do candidato',
    'formacao_e_idiomas.outro_idioma': 'Outro idioma',
    'formacao_e_idiomas.instituicao_ensino_superior': 'Institui√ß√£o de ensino superior',
    'formacao_e_idiomas.ano_conclusao': 'Ano de conclus√£o da forma√ß√£o'
}

# Listas de op√ß√µes
estados = ['Acre', 'Alagoas', 'Amap√°', 'Amazonas', 'Bahia', 'Cear√°', 'Distrito Federal', 'Espirito Santo', 
           'Goi√°s', 'Maranh√£o', 'Mato Grosso', 'Mato Grosso do Sul', 'Minas Gerais', 'Par√°', 'Para√≠ba', 
           'Paran√°', 'Pernambuco', 'Piau√≠', 'Rio de Janeiro', 'Rio Grande do Norte', 'Rio Grande do Sul', 
           'Rond√¥nia', 'Roraima', 'Santa Catarina', 'S√£o Paulo', 'Sergipe', 'Tocantins']

regioes = ['Norte', 'Nordeste', 'Centro-Oeste', 'Sudeste', 'Sul']

niveis_idioma_vaga = ['Avan√ßado', 'Fluente', 'Nenhum', 'B√°sico', 'Intermedi√°rio', 'T√©cnico']
niveis_idioma_candidato = ['Nenhum', 'Intermedi√°rio', 'B√°sico', 'Avan√ßado', 'Fluente']

outros_idiomas_candidato = [
    'Portugu√™s - Fluente', 'Franc√™s - Intermedi√°rio', 'Franc√™s - B√°sico', 'Italiano - Avan√ßado', 'Portugu√™s -',
    'Italiano - B√°sico', 'Portugu√™s - Avan√ßado', 'Alem√£o - B√°sico', 'Alem√£o -', 'Japon√™s - B√°sico', 'Japon√™s -',
    'Alem√£o - Avan√ßado', 'Japon√™s - Avan√ßado', 'Alem√£o - Intermedi√°rio', 'Russo - B√°sico', 'Russo - Intermedi√°rio',
    'Italiano - Intermedi√°rio', 'Portugu√™s - Intermedi√°rio', 'Japon√™s - Intermedi√°rio', 'Mandarim - B√°sico',
    'Franc√™s - Avan√ßado', 'Portugu√™s - Nenhum', 'Italiano -', 'Portugu√™s - B√°sico', 'Franc√™s - Fluente',
    'Italiano - Fluente', 'Japon√™s - Fluente', 'Japon√™s - Nenhum', 'Russo - Fluente', 'Alem√£o - Nenhum',
    'Franc√™s -', 'Alem√£o - Fluente'
]

outros_idiomas_vaga = [
    'Mandarim ou Russo', 'Nenhum', 'Avan√ßado', 'Portugu√™s Fluente', 'Portugu√™s Avan√ßado', 'Portugu√™s B√°sico',
    'Franc√™s B√°sico', 'Fluente', 'B√°sico', 'Franc√™s Intermedi√°rio', 'Mandarim - Desej√°vel', 'Alem√£o Fluente',
    'Franc√™s Fluente', 'Alem√£o Avan√ßado', 'Portugu√™s Intermedi√°rio', 'Portugu√™s'
]

areas_atuacao_vaga = [
    'TI - Sistemas e Ferramentas', 'TI - Desenvolvimento/Programa√ß√£o', 'TI - Projetos', 'TI - SAP',
    'TI - Infraestrutura', 'Gest√£o e Aloca√ß√£o de Recursos de TI', 'Administrativa',
    'TI - Processos e Neg√≥cios', 'Recursos Humanos', 'TI - Desenvolvimento/Design',
    'TI - Suporte', 'Financeira/Controladoria', 'TI - Desenvolvimento/Mobile', 'TI - Qualidade/Testes',
    'Comercial', 'TI - Banco de Dados', 'TI - Arquitetura', 'TI - Governan√ßa', 'TI - Telecom',
]

# Carrega o modelo treinado
modelo = joblib.load('modelo_xgb.pkl')

# Interface Streamlit
st.title('üß† Previs√£o de Contrata√ß√£o - Decision AI')
st.markdown("### Preencha os dados da vaga e do candidato")

# Captura as entradas do usu√°rio com widgets
estado = st.selectbox(campos['perfil_vaga.estado'], estados)
cidade = st.text_input(campos['perfil_vaga.cidade'])
regiao = st.selectbox(campos['perfil_vaga.regiao'], regioes)
nivel_academico_vaga = st.selectbox(campos['perfil_vaga.nivel_academico'], niveis_idioma_vaga)
nivel_ingles_vaga = st.selectbox(campos['perfil_vaga.nivel_ingles'], niveis_idioma_vaga)
nivel_espanhol_vaga = st.selectbox(campos['perfil_vaga.nivel_espanhol'], niveis_idioma_vaga)
area_atuacao_vaga = st.selectbox(campos['perfil_vaga.areas_atuacao'], areas_atuacao_vaga)
vaga_pcd = st.selectbox(campos['perfil_vaga.vaga_especifica_para_pcd'], ['Sim', 'N√£o'])
prioridade_vaga = st.selectbox(campos['informacoes_basicas.prioridade_vaga'], ['Alta', 'M√©dia', 'Baixa'])
area_atuacao_candidato = st.selectbox(campos['informacoes_profissionais.area_atuacao'], areas_atuacao_vaga)
nivel_profissional_candidato = st.selectbox(campos['informacoes_profissionais.nivel_profissional'], ['J√∫nior', 'Pleno', 'S√™nior'])
nivel_academico_candidato = st.selectbox(campos['formacao_e_idiomas.nivel_academico'], niveis_idioma_candidato)
nivel_ingles_candidato = st.selectbox(campos['formacao_e_idiomas.nivel_ingles'], niveis_idioma_candidato)
nivel_espanhol_candidato = st.selectbox(campos['formacao_e_idiomas.nivel_espanhol'], niveis_idioma_candidato)
outro_idioma = st.selectbox(campos['formacao_e_idiomas.outro_idioma'], outros_idiomas_candidato)
instituicao_ensino = st.text_input(campos['formacao_e_idiomas.instituicao_ensino_superior'])
ano_conclusao = st.number_input(campos['formacao_e_idiomas.ano_conclusao'], min_value=1900, max_value=2025, step=1)

# Bot√£o para previs√£o
if st.button('Prever Contrata√ß√£o'):
    # Cria um DataFrame com as entradas no formato que seu modelo espera
    dados = {
        'perfil_vaga.estado': estado,
        'perfil_vaga.cidade': cidade,
        'perfil_vaga.regiao': regiao,
        'perfil_vaga.nivel_academico': nivel_academico_vaga,
        'perfil_vaga.nivel_ingles': nivel_ingles_vaga,
        'perfil_vaga.nivel_espanhol': nivel_espanhol_vaga,
        'perfil_vaga.areas_atuacao': area_atuacao_vaga,
        'perfil_vaga.vaga_especifica_para_pcd': vaga_pcd,
        'informacoes_basicas.prioridade_vaga': prioridade_vaga,
        'informacoes_profissionais.area_atuacao': area_atuacao_candidato,
        'informacoes_profissionais.nivel_profissional': nivel_profissional_candidato,
        'formacao_e_idiomas.nivel_academico': nivel_academico_candidato,
        'formacao_e_idiomas.nivel_ingles': nivel_ingles_candidato,
        'formacao_e_idiomas.nivel_espanhol': nivel_espanhol_candidato,
        'formacao_e_idiomas.outro_idioma': outro_idioma,
        'formacao_e_idiomas.instituicao_ensino_superior': instituicao_ensino,
        'formacao_e_idiomas.ano_conclusao': ano_conclusao
    }
    df = pd.DataFrame([dados])

    # Pr√©-processar df conforme seu modelo espera (exemplo: encoding, normaliza√ß√£o)
    # Aqui voc√™ deve colocar as mesmas transforma√ß√µes que aplicou no treinamento do modelo
    # Por simplicidade, vamos assumir que o modelo aceita esses dados diretamente.

    # Faz a previs√£o (exemplo para um modelo xgboost)
    pred = modelo.predict(df)

    st.success(f'A previs√£o de contrata√ß√£o √©: {"Sim" if pred[0] == 1 else "N√£o"}')


